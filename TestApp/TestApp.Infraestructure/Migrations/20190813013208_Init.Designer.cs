// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TestApp.Infraestructure.DbConfig;

namespace TestApp.Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20190813013208_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.0-rtm-30799");

            modelBuilder.Entity("TestApp.Core.Entities.Candidate", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Email");

                    b.Property<string>("Name");

                    b.Property<string>("OfferId");

                    b.HasKey("Id");

                    b.HasIndex("OfferId");

                    b.HasIndex("Name", "OfferId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("TestApp.Core.Entities.Offer", b =>
                {
                    b.Property<string>("Id");

                    b.Property<bool>("Active");

                    b.Property<string>("Description");

                    b.Property<string>("EmployerId");

                    b.Property<string>("OfferTypeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("OfferTypeId");

                    b.ToTable("Offers");
                });

            modelBuilder.Entity("TestApp.Core.Entities.OfferType", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("OfferTypes");
                });

            modelBuilder.Entity("TestApp.Core.Entities.Role", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("TestApp.Core.Entities.User", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("PasswordHash");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");
                });

            modelBuilder.Entity("TestApp.Core.Entities.UserRole", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<string>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("TestApp.Core.Entities.Employer", b =>
                {
                    b.HasBaseType("TestApp.Core.Entities.User");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.ToTable("Employer");

                    b.HasDiscriminator().HasValue("Employer");
                });

            modelBuilder.Entity("TestApp.Core.Entities.Candidate", b =>
                {
                    b.HasOne("TestApp.Core.Entities.Offer", "Offer")
                        .WithMany("Candidates")
                        .HasForeignKey("OfferId");
                });

            modelBuilder.Entity("TestApp.Core.Entities.Offer", b =>
                {
                    b.HasOne("TestApp.Core.Entities.Employer", "Employer")
                        .WithMany("Offers")
                        .HasForeignKey("EmployerId");

                    b.HasOne("TestApp.Core.Entities.OfferType", "OfferType")
                        .WithMany()
                        .HasForeignKey("OfferTypeId");
                });

            modelBuilder.Entity("TestApp.Core.Entities.UserRole", b =>
                {
                    b.HasOne("TestApp.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TestApp.Core.Entities.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
